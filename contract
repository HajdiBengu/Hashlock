# Hashlock Contract

import smartpy as sp

class Hashlock(sp.Contract):
    def __init__(self):
        self.init(revealTime = sp.now,
                  hashed     = sp.bytes("0x0dae11"),
                  used       = False,
                  originator = sp.sender)

    @sp.entry_point
    def commit(self, params):
        sp.verify_equal(sp.source, self.data.originator, message = "You are not allowed to commit to this contract")
        self.data.revealTime = sp.now.add_days(1)
        salted = params.hash + sp.pack(params.receiver)
        self.data.hashed = sp.sha256(salted)

    @sp.entry_point
    def reveal(self, params):
        sp.verify(self.data.used == False, message = "This contract has already been used.")
        sp.verify(sp.now > self.data.revealTime, message = "It has not been 24 hours since your commit yet.")
        hashedNumber = sp.sha256(params)
        salted = hashedNumber + sp.pack(sp.sender)
        revealHash = sp.sha256(salted)
        sp.verify_equal(self.data.hashed, revealHash, message = "Reveal did not match commit.")
        self.data.used = True
        # sp.operations().push(sp.transfer_operation("", sp.tez(3), sp.contract(params), line_no))

@sp.add_test(name = "Commit test")
def test():
    scenario = sp.test_scenario()
    c1 = Hashlock()
    c1.set_initial_balance(sp.tez(15))
    admin = sp.test_account("Administrator")
    scenario += c1
    c1.commit(hash = sp.bytes("51e8ea280b44e16934d4d611901f3d3afc41789840acdff81942c2f65009cd52"), receiver = "tz1YbCiXtXZ2HtXGecejTbbpww4GzFH7HvYQ").run(sender = admin)
